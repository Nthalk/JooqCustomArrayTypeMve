/*
 * This file is generated by jOOQ.
 */
package example.tables.records;


import example.tables.Test;
import example.tables.interfaces.ITest;
import example.udt.interfaces.ITag;
import example.udt.records.TagRecord;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestRecord extends UpdatableRecordImpl<TestRecord> implements ITest {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>test.id</code>.
     */
    @Override
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>test.id</code>.
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>test.tags</code>.
     */
    public void setTags(TagRecord[] value) {
        set(1, value);
    }

    /**
     * Setter for <code>test.tags</code>.
     */
    @Override
    public void setTags(ITag[] value) {
        if (value == null)
            set(1, null);
        else
            set(1, value.into(new TagRecord[]()));
    }

    /**
     * Getter for <code>test.tags</code>.
     */
    @Override
    public TagRecord[] getTags() {
        return (TagRecord[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ITest from) {
        setId(from.getId());
        setTags(from.getTags());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends ITest> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Integer id, TagRecord[] tags) {
        super(Test.TEST);

        setId(id);
        setTags(tags);
        resetChangedOnNotNull();
    }
}
